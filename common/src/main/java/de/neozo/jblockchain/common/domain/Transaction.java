package de.neozo.jblockchain.common.domain;


import de.neozo.jblockchain.common.Hashes;

import java.util.Arrays;

import static de.neozo.jblockchain.common.Bytes.toByteArray;

public class Transaction {
    /**
     * Unique identifier which can be generated by hashing text, senderHash, signature and timestamp
     */
    private final byte[] hash;

    /**
     * Payload of this transaction
     */
    private final String text;

    /**
     * The hash of the address which is responsible for this Transaction
     */
    private final byte[] senderHash;

    /**
     * Signature of text which can be verified with publicKey of sender address
     */
    private final byte[] signature;

    /**
     * Creation time of this Transaction
     */
    private final long timestamp;

    public Transaction(String text, byte[] senderHash, byte[] signature, long timestamp) {
        this.text = text;
        this.senderHash = senderHash;
        this.signature = signature;
        this.timestamp = timestamp;
        this.hash = calculateHash();
    }

    public byte[] getHash() {
        return hash;
    }

    public String getText() {
        return text;
    }

    public byte[] getSenderHash() {
        return senderHash;
    }

    public byte[] getSignature() {
        return signature;
    }

    public long getTimestamp() {
        return timestamp;
    }

    public byte[] getSignableData() {
        return text.getBytes();
    }

    /**
     * Calculates the hash using relevant fields of this type
     *
     * @return SHA256-hash as raw bytes
     */
    public byte[] calculateHash() {
        return Hashes.digest(
                text.getBytes(),
                senderHash,
                signature,
                toByteArray(timestamp)
        );
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Transaction that = (Transaction) o;

        return Arrays.equals(hash, that.hash);
    }

    @Override
    public int hashCode() {
        return Arrays.hashCode(hash);
    }
}
